@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
}

@mixin flex-center-vert {
    display: flex;
    align-items: center;
}

@mixin flex-center-horiz {
    display: flex;
    justify-content: center;
}

@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
    font-size: $font-size * 1px;
    // font-size: $font-size * 0.1rem;
    // example using rem values and 62.5% font-size so 1rem = 10px

    @if $line-height==normal {
        line-height: normal;
    } @else {
        line-height: $line-height / $font-size;
    }

    @if $letter-spacing==normal {
        letter-spacing: normal;
    } @else {
        letter-spacing: #{$letter-spacing / $font-size}em;
    }
}

@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

@mixin pseudo(
    $width: 100%,
    $height: 100%,
    $display: inline-block,
    $pos: absolute,
    $content: ""
) {
    content: $content;
    display: $display;
    position: $pos;
    @include box($width, $height);
}

@mixin fade($type) {
    @if $type== "hide" {
        visibility: hidden;
        opacity: 0;
        transition: visibility 1s, opacity 1s;
    } @else if $type== "show" {
        visibility: visible;
        opacity: 1;
        transition: visibility 1s, opacity 1s;
    }
}

@mixin skew-background-transition($initial, $hover, $inverted: false) {
    background-size: 200% 100%;

    background: linear-gradient(
            90deg,
            $hover 0%,
            $hover 50%,
            $initial 50%,
            $initial 100%
    ) no-repeat right bottom;
    @if $inverted {
        background-position: left bottom;
    }
    transition: background-position 0.25s ease-out;

    &:hover {
        background-position: left bottom;
        @if $inverted {
            background-position: right bottom;
        }
    }
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        box-shadow: inset $top $left $blur $color;
    } @else {
        box-shadow: $top $left $blur $color;
    }
}

@mixin transform($property) {
    -webkit-transform: $property;
    -ms-transform: $property;
    transform: $property;
}

@mixin border-radius($all: null, $tl: $all, $tr: $all, $btl: $all, $btr: $all) {
    border-radius: $tl $tr $btr $btl;
}

@mixin centerAbsolute($pos) {
    position: absolute;
    @if $pos == "both" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else if $pos == "left" {
        left: 50%;
        transform: translateX(-50%);
    } @else if $pos == "top" {
        top: 50%;
        transform: translateY(-50%);
    }
}

@mixin minWidth($breakpoint) {
    @media only screen and (min-width: $breakpoint) {
        @content;
    }
}

@mixin maxWidth($breakpoint) {
    @media only screen and (max-width: $breakpoint) {
        @content;
    }
}

@mixin flex($direction: row, $content: null , $items: null, $wrap: null) {
    display: flex;
    flex-direction: $direction;
    justify-content: $content;
    align-items: $items;
    flex-wrap: $wrap;
}

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin font-size($size, $base: 16) {
    font-size: $size * 1px; // fallback for old browsers
    font-size: ($size / $base) * 1rem;
}

@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
    @if $vendors {
        @each $vendor in $vendors {
            #{"-" + $vendor + "-" + $property}: #{$value};
        }
    }
    @if $default {
        #{$property}: #{$value};
    }
}

@mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    } @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf') format('truetype'),
        url($file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

@mixin center-vertically {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

@mixin flex-width($percent) {
    display: flex;
    width: 100%;
    max-width: $percent * 1%;
    flex: 0 ($percent * 1%);
    overflow: hidden;
}

@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}
